
Stepik
User avatar
"Поколение Python": курс для начинающих
Прогресс по курсу:  680/2049

  
1  Общая информация о курсе
  
  
  
2  Ввод-вывод данных
  
  
  
  
  
  
Экзамен
3  Итоговая работа на ввод-вывод данных
  
  
  
4  Условный оператор
  
  
  
4.3  Вложенные и каскадные условия
  
Экзамен
5  Итоговая работа на условный оператор
  
5.1  Задачи на программирование
  
6  Типы данных
  
6.1  Числовые типы данных: int, float
  
6.2  Модуль math
  
6.3  Строковый тип данных
  
7  Циклы for и while
  
7.1  Цикл for
  
7.2  Цикл for: функция range
  
7.3  Частые сценарии
  
7.4  Цикл while
  
7.5  Цикл while: обработка цифр числа
  
7.6  break, continue и else
  
7.7  Поиск ошибок и ревью кода
  
7.8  Вложенные циклы. Часть 1
  
7.9  Вложенные циклы. Часть 2
  
Экзамен
8  Итоговая работа на циклы
Часть 1
Часть 2
  
9  Строковый тип данных
  
  
  
  
  
  
  
Экзамен
10  Итоговая работа на строки
  
  
  
11  Списки
  
  
  
  
  
  
  
  
  
Экзамен
12  Итоговая работа на списки
  
  
  
13  Функции
  
  
  
  
  
  
  
Экзамен
14  Итоговая работа на функции
  
  
15  Работа над мини-проектом
  
  
  
  
  
  
  
  
16  Заключение
  
  
7.3 Частые сценарии
1 из 16 шагов пройден
0 из 83 баллов  получено
Тема урока: частые сценарии
Подсчет количества
Вычисление суммы и произведения
Обмен значений переменных
Сигнальные метки
Определение максимума и минимума
Расширенные операторы присваивания
Аннотация. Рассмотрим частые сценарии при написании циклов.

Подсчет количества
Нередко нужно, чтобы наши программы подсчитывали сколько раз что-либо произошло. К примеру видео игра может подсчитывать количество поворотов персонажа или математическая программа может считать как много чисел обладают некоторым свойством. Ключ к подсчету - использование переменной счетчика.

Напишем программу, которая считывает 10 чисел и определяет сколько из них больше 10.

counter = 0
for i in range(10):
    num = int(input())
    if num > 10:
        counter = counter + 1
print('Было введено', counter, 'чисел, больших 10.')
Каждый раз когда мы считываем число большее 10, мы добавляем 1 к нашему текущему значению переменной counter. В программе это реализовано в строке counter = counter + 1. Обратите внимание на начальное значение переменной счетчика counter = 0. Без начального значения мы получили бы ошибку, поскольку дойдя до строки counter = counter + 1 Python ничего не знал бы о переменной counter . Строка кода counter = counter + 1 означает: возьми старое значение переменной counter, прибавь к нему 1 и переприсвой переменной это значение. Если не придать переменной начальное значение, то непонятно, к чему прибавлять 1 в самый первый раз.

Подсчет количества – это очень частый сценарий. Он состоит из двух шагов:

Создание переменной счетчика и придание ей первоначального значения: counter = 0;
Увеличение переменной счетчика на 1: counter = counter + 1.
Часто при написании программ требуется использовать несколько счетчиков. Модифицируем предыдущую программу: посчитаем еще и количество нулей среди введенных чисел.

counter1 = 0
counter2 = 0
for i in range(10):
    num = int(input())
    if num > 10:
        counter1 = counter1 + 1
    if num == 0:
        counter2 = counter2 + 1
print('Было введено', counter1, 'чисел, больших 10.')
print('Было введено', counter2, 'нулей.' )
Рассмотрим еще один пример: подсчитать количество чисел из диапазона [1; \, 100][1;100], квадрат которых оканчивается на 4.

counter = 0
for i in range(1, 101):
    if i**2 % 10 == 4:
        counter = counter + 1
print(counter)
Мы используем функцию range() с двумя параметрами для генерации последовательности чисел от 1 до 100. Переменная i последовательно принимает значения от 1 до 100, мы проверяем, условие: квадрат числа i оканчивается на 4 с помощью условия i**2 % 10 == 4.

   Для переменной счетчика удобно использовать имя counter. 

Вычисление суммы и произведения
Наравне с подсчетом количества по частоте стоит задача вычисления суммы. К примеру видео игра должна считать сумму очков. В таком случае начальное значение переменной будет равно 0, а далее оно будет увеличиваться на некоторое количество заработанных очков, скажем на 10. Мы пишем следующий код:

score = 0
...
score = score + 10
Напишем программу, которая считывает 10 чисел и определяет сумму тех из них, которые больше 10.

total = 0
for i in range(10):
    num = int(input())
    if num > 10:
        total = total + num
print('Сумма чисел больших 10 равна',  total)
Каждый раз когда программа считывает число большее 10, она добавляет его к текущему значению переменной total. Это реализовано в строке total = total + num. Обратите внимание на начальное значение переменной сумматора total = 0. Без начального значения, мы получили бы ошибку, поскольку дойдя до строки total = total + num Python ничего не знал бы о переменной total . Строка кода total = total + num означает возьми старое значение переменной total, прибавь к нему num и переприсвой переменной это значение. Если не придать переменной начальное значение, то не к чему прибавлять num в самый первый раз.

Подсчет суммы состоит из двух шагов:

Создание переменной сумматора и придание ей первоначального значения: total = 0;
Увеличение переменной сумматора на нужное число: total = total + num.
Напишем программу, которая считает сумму натуральных чисел от 1 до 100:

total = 0
for i in range(1, 101):
    total = total + i
print('Сумма равна', total)
Рассмотрим еще один пример: напишем программу, которая запрашивает 10 целых чисел и находит их среднее значение:

total = 0
for i in range(10):
    num = int(input())
    total = total + num
average = total / 10
print('Среднее значение равно', average)
Аналогичным образом вычисляется произведение. При вычислении произведения, начальное значение переменной мультипликатора мы устанавливаем равным 1, в отличии от сумматора, где оно равно 0.

    Для переменной сумматора и мультипликатора удобно использовать имя total. 

Обмен значений переменных
Очень часто нам требуется обменять значения двух переменных x и y. Начинающие программисты иногда пишут такой код:

x = y
y = x
Однако он не работает. Предположим, что x = 3 и y = 5. Первая строка присвоит переменной x значение 5, что правильно, однако вторая строка установит значение переменной y в 5, поскольку значение x уже равно 5. Для решения задачи мы можем использовать временную переменную:

temp = x
x = y
y = temp
Такой код пишут почти во всех языках программирования. Однако в Python есть и более простой способ. Мы можем написать так:

x, y = y, x
В результате выполнения такого кода Python поменяет значения переменных x и y местами.

Сигнальные метки
Сигнальная метка (флажок) может использоваться, когда надо чтобы одна часть программы узнала, о происходящем в другой части программы.
Напишем программу, определяющую, что натуральное число является простым:

num = int(input())
flag = True

for i in range(2, num):
    if num % i == 0:        #  если исходное число делится на какое-либо отличное от 1 и самого себя
        flag = False

if num == 1:
    print('Это единица, она не простая и не составная') 
elif flag == True:
    print('Число простое')
else:
    print('Число составное')
Напомним, что число является простым, если оно не имеет делителей, кроме 1 и самого себя. Вышеприведенная программа работает следующим образом: начальное значение переменной флага равно True, что говорит о том, что число является простым. Затем мы перебираем все числа от 2 до num - 1. Если одно из этих значений оказывается делителем числа num, тогда число num является составным и мы устанавливаем значение флага False. Как только цикл завершен, мы проверяем, установлен флаг или нет. Если это так, мы знаем, что был делитель, и число не является простым. В противном случае число должно быть простым.

Флаговые переменные могут иметь более осмысленное название. Например, в случае с проверкой числа на простоту, название флаговой переменной могло бы быть is_prime.

Максимум и минимум
Поиск наибольшего или наименьшего значения в некоторой последовательности чисел, также частая задача в программировании. Напишем программу, которая считывает 10 положительных чисел и находит среди них наибольшее число.

largest = -1
for i in range(10):
    num = int(input())    
    if num > largest:
        largest = num
print('Наибольшее число равно', largest) 
Мы устанавливаем начальное значение переменной largest  в -1. Далее программа считывает 10 чисел, и если какое-то из них оказывается больше текущего значения largest, переприсваивает его. В качестве начального значения взято число -1, поскольку мы знаем, что все числа положительны, таким образом уже первое сравнение приведет к переприсваиванию.

Распространен подход, когда в качестве начального значения переменной, сразу принимается первый элемент последовательности. Напишем программу, которая считывает 10 чисел (необязательно положительных) и находит среди них наибольшее:

largest = int(input())  # принимаем первое число за максимальное
for i in range(9):
    num = int(input())
    if num > largest:
        largest = num
print('Наибольшее число равно', largest) 
Для нахождения наименьшего значения последовательности следует поменять знак неравенства (>) на противоположный (<). В таком случае название переменной largest стоит заменить на smallest.

    Для переменных, хранящих наибольшее и наименьшее значения, подходят имена largest и smallest. 

Расширенные операторы присваивания
Довольно часто программы имеют инструкции присваивания, в которых переменная на левой стороне от оператора = также появляется на правой от него стороне. Например, 

counter = counter + 1
На правой стороне оператора присваивания 1 прибавляется к переменной counter. Полученный результат затем присваивается переменной counter, заменяя первоначальное значение. По сути, это строка кода добавляет 1 к counter. Еще один пример такой инструкции мы видели при подсчете суммы:

total = total + num
Эта инструкция присваивает значение выражения total + num переменной total. В результате исполнения этой инструкции число num прибавляется к значению total.

Различные инструкции присваивания (в каждой инструкции x = 6)
Инструкция	Что она делает	Значение x после инструкции
x = x + 4	Прибавляет 4 к x	10
x = x - 3	Вычитает 3 из x	3
x = x * 10	Умножает x на 10	60
x = x / 4	Делит x на 4	1.5
x = x // 4	Делит нацело x на 4	1
x = x % 4	Находит остаток от деления x на 4	2
Эти типы операций находят широкое применение в программировании. Для удобства Python предлагает расширенные операторы присваивания. Расширенные операторы не требуют, чтобы программист дважды набирал имя переменной. Приведенную ниже инструкцию:

total = total + num
 можно переписать как

total += num
Точно так же инструкцию

counter = counter + 1
можно переписать как

counter += 1
Оператор	Пример использования	Эквивалент
+=	x += 5	x = x + 5
-=	x -= 2	x = x - 2
*=	x *= 10	x = x * 10
/=	x /= 4	x = x / 4
//=	x //= 4	x = x // 4
%=	x %= 4	x = x % 4
Примечания
Примечание 1. Аналогичным образом можно менять местами значения трех и более переменных.

Примечание 2. Очень часто сигнальные метки называют flag.

Примечание 3. Поскольку в Python есть встроенные функции max() и min(), то давать такие названия для максимального и минимального значения не очень хорошо. Куда лучше использовать названия largest и smallest.

Примечание 4. Сумму чисел от 1 до 100, можно вычислить и без цикла: 
\text{Сумма} = \frac{1+100}{2}\cdot 100 = 5050.
Сумма= 
2
1+100

 ⋅100=5050.
Действительно, числа от 11 до 100100, можно разбить на 5050 пар, сумма в которых равна 101101: 
1+ 100 = 101, \, 2 + 99 = 101, \, 3 + 98 = 101, \ldots 50 + 51 = 101.
1+100=101,2+99=101,3+98=101,…50+51=101.
В начальной школе, где учился математик Карл Фридрих Гаусс (6 лет), учитель, чтобы занять класс на продолжительное время самостоятельной работой, дал задание ученикам – вычислить сумму всех натуральных чисел от 11 до 100100. Маленький Гаусс ответил на вопрос почти мгновенно, применив указанный способ подсчета, чем невероятно удивил всех и, прежде всего, учителя.

Картинки по запросу карл фридрих гаусс

❤️ Happy Pythoning! 🐍 
 3813  481
Шаг 1
 Комментариев
 
Самые популярные
Будьте вежливы и соблюдайте наши принципы сообщества. Пожалуйста, не оставляйте решения и подсказки в комментариях, для этого есть отдельный форум.
User avatar
User avatar
Комментарий закреплён
Тимур 👨‍🏫 Гуев
6 месяцев назад
Понравился урок? Ставьте 👍. Это поможет узнать о нашем курсе тем, кому он необходим. Сделаем курс еще более популярным!



 633  12

User avatar
Антон Просвиров
2 года назад
Очень много информации впихнули в один блок. Хорошо бы дозировать новую информацию.

 637  43

User avatar
Елена Анатольевна Безбородова
2 года назад
Почитала комментарии, в них много критики. Удивилась. Таких простых и подробных объяснений я еще не встречала. Материал большой, но ведь все, что требуется от нас - внимательно его прочитать. Можно самим решить приведенные примеры.

 195  15

User avatar
Артем Становов
в прошлом году
Началось. Нормально же сидели.

 167 

User avatar
Антонио Панько
в прошлом году
А не такие уж и сложные были эти шахматы...

 140  1

User avatar
Дарья Барышева
6 месяцев назад


 110 

User avatar
Olga Garmash
2 года назад
Добрый вечер!

Было бы здорово, если бы показали примеры применения  "Обмен значений переменных".

в последующих заданиях у меня именно с ним самые большие трудности )


Благодарю Вас за такой подробный, последовательный курс! Даже не надеялась встретить такой в открытом доступе.

Супер! Спасибо!!!

 104  2

User avatar
Михаил Троман
в прошлом году
Про flag было не понятно 

 89 

User avatar
Andrii Sabo
2 года назад
Так вот кодить  - это плохой стиль! Потому что проверять равенство логической переменной некоему логическому же значению - это, мягко говоря, странное излишество! У логической переменной и так логическое значение уже есть от ее создания!

if flag == True:
    print('Число простое')
Надо так:

if flag:

    print('Число простое')

 84  12

User avatar
Илья Блинов
2 года назад
В конце не хватает чего-нибудь в стиле:
Этим Гауссом был Альберт Эйнштейн.

 74  5

User avatar
Ray Ray
2 года назад
про Гаусса топ история))

 46 

User avatar
Марк Касимов
в прошлом году
пошла жаришка

 31 

User avatar
Родион Копаев
10 месяцев назад
Понадобилось три дня, чтоб набраться духу, прежде чем сесть всё это запихивать в голову. Но потом вспоминил, что мне нужно за этот год сменить профессию и сижу, жую.

 29 

User avatar
Eugene Vovk
в прошлом году
Подскажите, а где ещё можно про "Сигнальные метки/флаги" почитать?
Не совсем понятная оказалась тема :(

 25 

User avatar
Юлия ренре
в прошлом году
Ну ничего себе задания в 1 классе, а мы солнышки рисовали😆
 23 

User avatar
Никита Шаламов
5 месяцев назад


Изменен Руслан Чаниев 5 месяцев назад
 21 

User avatar
Акоп Погосян
10 месяцев назад
На этом наши полномочия всё....

 21 

User avatar
Геннадий Габдуллин
в прошлом году
Хардкор начался)

 21 

User avatar
Николай Петрушенко
в прошлом году
Согласен со всеми, инфы много, разделили бы на пару блоков

 20 

User avatar
Регина Григорьян
5 месяцев назад
Другими словами: counter нам нужна, чтобы посчитать, сколько раз повторятся числа по условию выше (то есть, сколько всего цифр в последовательности)

Например, range(3, 7) - 3 4 5 6 (чисел всего 4 в ряду, это и есть counter)

А total нужен для того, чтобы сложить значение всех чисел в последовательности

Например, range(3, 7) - 3 4 5 6 (складываем 3 + 4 + 5 + 6 = 18, это и есть total)

Изменен Регина Григорьян 5 месяцев назад
 17 

User avatar
Olga Vasina
10 месяцев назад
Про флаг что то совсем не понятно

 15 

User avatar
Александр Шахлай
2 года назад
Интересно. Почему-то из предыдущего материала я сделал вывод, что после условной инструкции if обязательно должна следовать elif или else. А здесь получается, что она может идти несколько раз подряд и после неё elif или else использовать не обязательно.



 16  1

User avatar
Lyudmila Samigullina
в прошлом году
Невероятный курс!!! За несколько недель поняла больше, чем за несколько месяцев в компьютерной академии (хоть и изучали там другие языки, но суть то та же). Грамотная подача материала вызывает высокую вовлечённость в процесс обучения! Спасибо вам, Авторы курса!!!
 14 

User avatar
Константин Константинов
8 месяцев назад
сумму чисел можно и без цикла вычислить, например от 1 до 100:

total = sum(range(1,101))

 11 

User avatar
Павел Прокошев
24 дня назад
Это самый офигенный курс. Я потратил кучу времени на старый курс который давался для биологов, тут же на степике. Но там действительно мало теории и относительно сложные задания. 
Тут же все структурировано, по нарастающей и задачи адекватны данному материалу и предполагаемому уровню учеников. И это совершенно бесплатно! просто шок!
Не понимаю критиков... тут много, тут мало, не в той последовательности написано...люблю-не люблю...
Вам просто так дают отличный материал и пройдя часть другого курса, часть курса на пайтонтьютор, и несколько других, могу сказать, что такого количества тонкостей и нюансов нет нигде.  
Просто не вериться, что это бессплатно!

 10 

User avatar
Vitaliy Galiuk
в прошлом году
Важный момент: 

counter = counter + 1
можно переписать как

counter += 1
 10 

User avatar
Кристиан
6 месяцев назад
Почти всё понятно, но флаги для меня пока загадка...

 9 

User avatar
Anonymous 375114030
8 месяцев назад
Было бы здорово, после того как вы написали код и объяснили принцип его работы, увидеть как выдает результат такая написанная программа с конкретными цифрами, чтобы будущий программист мог поводить пальчиком и найти "что, из чего и как" получается. имхо 

 9 

User avatar
Максим Швец
4 месяца назад
Мне кажется этот раздел надо было разделить хотя б на две части, так как большой обьем надо усвоить, после чего много решений, было б проще часть учишь, часть решаешь, после еще раз так же. ИМХО

 9  1

User avatar
Мурзакой максим
в прошлом году
ничего не потятно слишком много информации

 8 

User avatar
Михаил Сафонов
2 года назад
Очень лаконичный код для определения простых чисел. Сколько времени голову ломал... а тут так просто)))

 8 

User avatar
Денис Раметов
5 месяцев назад
Дозировка информации все больше и больше... Читать приходится по насколько раз. НО мы не сдаёмся.
 7 

User avatar
Johan Petrov
8 месяцев назад
Кстати, да, с этого момента я и застрял. Сильно много информации в одном блоке, счетчик меня добил

 7 

User avatar
Eld Musa
в прошлом году
Можно воспользоваться функцией "sum(range(1,101))", чтобы вычислить сумму.
Изменен Eld Musa в прошлом году
 7 

User avatar
Bohdan Raikovskiy
4 месяца назад
C флагами не смог разобраться(((

 6 

User avatar
Андрей Сытниченко
5 месяцев назад
Почитал комменты товарищей по "несчастью" ... Полегчало. Думаю, тяжело в учении, легче на решении задач. Всем удачи. Не волнуйтесь Гаусс 6 лет был в одном классе, поэтому легкотня.)))

 6 

User avatar
Иван Романов
6 месяцев назад
Вот теперь действительно пора обратно на завод

 6 

User avatar
Petr
7 месяцев назад
очень много информации для одного шага. То чувство когда до этого нормально по чутка накидывали, а потом решили, что этого делать не надо. Как итог голова кипит как чайник

 6 

User avatar
Галина
9 месяцев назад
Если по совести, то здесь начинается непонятный блок информации (лично для меня). Пошла на ютуб, посмотрела некоторые ролики, совершенно не понимаю как и что они там делают. Не думала что так резко окунусь в холодную воду после достаточно легких и интересных заданий. Мотивация трещит но не ломается. Подскажите что еще можно почитать по данному материалу. Буду благодарна

 6 

User avatar
Михаил Садов
2 месяца назад
Слишком много инфы для одного урока. Страшно представить последующие задачи
 5 

User avatar
Anonymous 437201960
2 месяца назад
Наибольшим известным простым числом по состоянию на январь 2019 года является число Мерсенна M82 589 933 = 282 589 933 − 1. Оно содержит 24 862 048 десятичных цифр; в книге с записью этого числа было бы около девяти тысяч страниц. Его нашли 7 декабря 2018 года в рамках проекта по распределённому поиску простых чисел Мерсенна GIMPS. Предыдущее самое большое известное простое число, открытое в декабре 2017 года, было на 1 612 623 знаков меньше[31].

 5 

User avatar
Олег Шевнин
6 месяцев назад
Чтож, как говориться "Welcome to Hell!"

Изменен Олег Шевнин 6 месяцев назад
 5 

User avatar
Вероника Антропова
9 месяцев назад
Я даже не знаю то ли мне завидно, что такую задачу решил 6 летний ребенок не в 21 веке,  то ли впадать в уныние от этой информации 
 

 5 

User avatar
Надежда Романова
11 дней назад

До сигнальных меток все было норм... А потом мозг сломался... пожалуй надо перекур и в несколько заходов, чтобы отложилось, а не мимо прочиталось...

 4 

User avatar
Александр Белов
14 дней назад
Лично меня больше пугает не сам язык программирования, а то с какой лёгкостью решаются задачи в примерах! То есть составить логически правильную цепочку действий, у меня это не получается, всё время выходит самый тернистый путь составления кода, ну а когда в конце привели пример с Гаусом, я вообще почувствовал себя аутистом. Те кто прошёл уже этот путь программиста хотя бы до джуниор разработчика, скажите, вот такой мой подход к коду "входить в дом через что угодно, но не через дверь" так и останется или чем глубже изучаешь тем правильнее пишешь!? Очень интересует этот вопрос, а то как-то руки опускаются кодить когда вместо трёх строк кода пишешь партянку на 20 строк.
 4 

User avatar
Кайпаев Асланбек
в прошлом месяце
Круто, но много и сложно. Частями надо слона, частями.

 4 

User avatar
Артём Никитин
в прошлом году
Чет прям много много информации за раз! x_x
 5  1

User avatar
Сергей Ивашков
12 дней назад
Дааа, товарищи... Чем дальше в лес - тем больше дров ))

Жаль, что я не Гаусс(

Изменен Сергей Ивашков 12 дней назад
 3 

User avatar
Алексей
в прошлом месяце
(⌐■_■)>  читаю и ничего не понимаю... это нормально?

Изменен Алексей в прошлом месяце
 3 

User avatar
Сальников Максим
2 месяца назад
Я про сигнальные метки вообще не понял 

 3 

User avatar
Никита Маркин
2 месяца назад
Гланое не поставить на этом флаг..

 3 